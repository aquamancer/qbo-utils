package com.aquamancer.payrollscript.payperiod;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.time.LocalDate;


public class PayPeriod {
    private static final Logger LOGGER = LogManager.getLogger(PayPeriod.class);
    private final LocalDate now;
    private final int month, dayOfMonth, monthLength, year;
    private int fiscalYear, payPeriod;
    private LocalDate endOfPayPeriod;
    public PayPeriod() {
        // Set values based on the current date.
        now = LocalDate.now();
        month = now.getMonthValue();
        dayOfMonth = now.getDayOfMonth();
        monthLength = now.lengthOfMonth();
        year = now.getYear();

        // Set calculated values.
        fiscalYear = calculateFiscalYear();
        payPeriod = calculatePayPeriod();
        endOfPayPeriod = calculateEndOfPayPeriodDate();
    }

    /**
     * Uses the payroll period based on the date of program execution and returns a
     * StringBuilder of the spreadsheet name that is auto-generated by the customer.
     * @return A StringBuilder of the automatic spreadsheet file name, including ".csv".
     */
    public StringBuilder getPayrollSpreadsheetName() {
        StringBuilder fileName = new StringBuilder();
        fileName.append("IOPInput_prascifi_");
        fileName.append(fiscalYear);
        fileName.append("PP");
        fileName.append(createTensPlaceholder(payPeriod));
        fileName.append("_");
        fileName.append(endOfPayPeriod.getYear()).append(createTensPlaceholder(endOfPayPeriod.getMonthValue())).append(createTensPlaceholder(endOfPayPeriod.getDayOfMonth()));
        fileName.append(".csv");
        LOGGER.info("generated spreadsheet name: {}", fileName.toString());
        return fileName;
    }

    /**
     * @return Returns the fiscal year that starts on March 1st, associated with 1 pay period before the pay period
     * of the time of program execution.
     */
    private int calculateFiscalYear() {
        int fiscalYear;
        // if it is march 1-15, or, jan or feb, return year - 1
        if ((month == 3 && dayOfMonth >= 1 && dayOfMonth <= 15) || (month >= 1 && month <= 2)) {
            fiscalYear = year - 1;
        } else { // otherwise return the current year
            fiscalYear = year;
        }
        LOGGER.debug("Calculated fiscal year as: {}", fiscalYear);
        return fiscalYear;
    }

    /**
     * Given a fiscal year that starts on March 1st, calculates and returns the pay period 1 before the pay period
     * at the time of the program's execution. A pay period is a bi-monthly count starting from the beginning
     * of the fiscal year. For example, March 1-15 would be pay period = 1, and Feb 16-EOM = 24. However, keep in
     * mind that this has an offset of - 1.
     * @return (pay period at time of program's execution) - 1
     */
    private int calculatePayPeriod() {
        int currentPayPeriod = -1;
        int actualPayPeriod = -1;
        if ((month == 3 && dayOfMonth >= 16 && dayOfMonth <= monthLength) || (month >= 4 && month <= 12)) {
            if (dayOfMonth >= 1 && dayOfMonth <= 15) {
                currentPayPeriod = (month - 3)*2 + 1;
                actualPayPeriod = currentPayPeriod - 1;
            } else if (dayOfMonth >= 16) {
                currentPayPeriod = (month - 3)*2 + 2;
                actualPayPeriod = currentPayPeriod - 1;
            }
        } else if (month == 3 && dayOfMonth <= 15) {
            currentPayPeriod = 1;
            actualPayPeriod = 24;
        } else if (month >= 1 && month <= 2) {
            if (dayOfMonth >= 1 && dayOfMonth <= 15) {
                currentPayPeriod = (month + 10)*2 - 1;
                actualPayPeriod = currentPayPeriod - 1;
            }
        } else {
            throw new RuntimeException("Code should not have reached this point.");
        }
        return actualPayPeriod;
    }
    /**
     * Calculates the date of the last day of the pay period calculated by the pay period before the pay period
     * of the date of program execution.
     * @return A LocalDate of the day of [end of pay period of [pay period at the time of program execution - 1]].
     */
    private LocalDate calculateEndOfPayPeriodDate() {
        int endOfPPYear, endOfPPMonth, endOfPPDay;
        //year: if jan 1-15, it's dec 31 of previous year
        if (month == 1 && dayOfMonth >= 1 && dayOfMonth <= 15) {
            endOfPPYear = year - 1;
        } else {
            endOfPPYear = year;
        }
        //month: if any month 1-15, it's the previous month. if jan 1-15, previous month is december
        int payMonth = -1;
        int payDay = -1;
        if (month == 1 && dayOfMonth >= 1 && dayOfMonth <= 15) {
            endOfPPMonth = 12;
            endOfPPDay = 31;
        } else if (dayOfMonth >= 1 && dayOfMonth <= 15) {
            endOfPPMonth = month - 1;
            endOfPPDay = LocalDate.now().minusMonths(1).lengthOfMonth();
        } else if (dayOfMonth >= 16 && dayOfMonth <= monthLength) {
            endOfPPMonth = month;
            endOfPPDay = 15;
        } else {
            throw new RuntimeException("Code should not have reached this point.");
        }
        LocalDate endOfPayPeriod = LocalDate.of(endOfPPYear, endOfPPMonth, endOfPPDay);
        LOGGER.debug("Calculated end of pay period day: {}", endOfPayPeriod.toString());
        return endOfPayPeriod;
    }
    /**
     * Helper method to create a 0 in front of a number that is less than 10.
     */
    private static String createTensPlaceholder(int num) {
        // 0 <= num < 10
        if (num >= 0 && num < 10) {
            return "0" + num;
        } else {
            return Integer.toString(num);
        }
    }
    public LocalDate getEndOfPayPeriod() {
        return endOfPayPeriod;
    }
}
